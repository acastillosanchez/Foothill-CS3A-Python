"""
02/06/2020
The test program takes a function any whole number as parameter and returns a string containing the number
spelled out in English.
The test program includes at least five function definitions, calls each of the four functions, and prints
their returned values.
"""
#My Program
"""
This file contains functions that are helpful for spelling out numbers.
"""

def digitName(digit):
    """
    Returns a string containing the English word naming "digit".
    "digit" must be between 1 and 9, inclusive
    """
    if digit == 1: return " one"
    if digit == 2: return " two"
    if digit == 3: return " three"
    if digit == 4: return " four"
    if digit == 5: return " five"
    if digit == 6: return " six"
    if digit == 7: return " seven"
    if digit == 8: return " eight"
    if digit == 9: return " nine"
    return ""

def teenName(number):
    """
    Returns a string containing the English word naming "number".
    "number" must be between 10 and nineteen inclusive.
    """
    if number == 10: return " ten"
    if number == 11: return " eleven"
    if number == 12: return " twelve"
    if number == 13: return " thirteen"
    if number == 14: return " fourteen"
    if number == 15: return " fifteen"
    if number == 16: return " sixteen"
    if number == 17: return " seventeen"
    if number == 18: return " eighteen"
    if number == 19: return " nineteen"
    return ""

def tensName(number):
    """
    Returns a string containing the English word for just the tens part of "number".
    "number" must be an integer between 20 and 99 inclusive.
    """
    if number >= 90: return " ninety"
    if number >= 80: return " eighty"
    if number >= 70: return " seventy"
    if number >= 60: return " sixty"
    if number >= 50: return " fifty"
    if number >= 40: return " forty"
    if number >= 30: return " thirty"
    if number >= 20: return " twenty"
    return ""

def hundredName(number):
    """
    Returns a string containing the English word for just the tens part of "number".
    "number" must be an integer between 100 and 999 inclusive.
    """
    if number >= 900: return " nine hundred"
    if number >= 800: return " eight hundred"
    if number >= 700: return " seven hundred"
    if number >= 600: return " six hundred"
    if number >= 500: return " five hundred"
    if number >= 400: return " four hundred"
    if number >= 300: return " three hundred"
    if number >= 200: return " two hundred"
    if number >= 100: return " one hundred"
    return ""

def spell (number):
    part = number
    if number == 0:
        print ("zero")
    if number < 0:
        number_name = "negative"
    else:
        number_name = ""
    number = abs(number)
    if number > 0 and number < 10:
        number_name = number_name + digitName(number)
    if number >=10 and number < 20:
        number_name = number_name + teenName(number)
    if number >20 and number < 99:
        number_name = number_name + tensName(number - (number % 10)) + digitName(number % 10)
    if number >99 and number < 1000:
        number_name = number_name + hundredName(number - (number % 100)) + spell(number % 100)
    if number >1000 and number < 1000000:
        number_name = number_name  + spell(int(number/1000)) + " thousand" + spell(number % 1000)
    if number > 1000000 and number < 1000000000:
        number_name = number_name + spell(int(number / 1000000)) + " million" + spell(number % 1000000)

    return number_name
number = int(input("Enter number to print:"))
if number == 0:
    print("zero")
else:
    print (spell(number))

print(spell(123456789))
print(spell(456678))
print(spell(66))
print(spell(-123456789))
print(spell(-456678) )
print(spell(-418))
print(spell(0))      # should print "zero" without the quotes
print(spell(10004))


#My Output, this is the actual output generated by the program above.
"""
The output of the cases: 
print(spell(123456789))
print(spell(456678))
print(spell(66))
print(spell(-123456789))
print(spell(-456678) )
print(spell(-418))
print(spell(0))      
print(spell(10004))
are shown below.
 
Enter number to print:123456789
 one hundred twenty three million four hundred fifty six thousand seven hundred eighty nine
 one hundred twenty three million four hundred fifty six thousand seven hundred eighty nine
 four hundred fifty six thousand six hundred seventy eight
 sixty six
negative one hundred twenty three million four hundred fifty six thousand seven hundred eighty nine
negative four hundred fifty six thousand six hundred seventy eight
negative four hundred eighteen
zero

 ten thousand four

Process finished with exit code 0
"""

