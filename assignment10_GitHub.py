"""
03/30/2020

For this program I reused the class PlayingCard from Assignment #9. This is an object oriented program, with instance
variables, class variables, and sorts a list the easy way. The program has a defined class where one object of the class
represents one playing card. The program executes code and test a reusable class. This program calculates a comment for
the PlayingCard class and for every method in the class. This program has seven methods. This test program thoroughly
tests all methods inside class PlayingCard. This program demonstrates additional practice with dictionaries. The class
PlayingCard has a comment that states what one object of class PlayingCard represents. Every method in class PlayingCard
has a comment that tells what the method does or returns. The dictionary translates from rank numbers and suit letters
to words are class variables. Methods _eq__() and __lt__() return the correct value and contains a comment. The test
program contains a list of PlayingCard objects, calls a built-in sort function to sort the list of PlayingCard objects,
and test both _eq__() and __lt__() methods thoroughly before proceeding. Plus, a class decorator @total_ordering was added
to class PlayingCard. The main program includes five PlayingCard objects, are placed into a Python list, and
sorts the list using sorted() which are built into Python. The test code submitted includes at least one direct test
of each of the new comparison methods, using the symbols "==" and "<".
"""

# My Program
import functools

get_name = {}
get_name[1] = 'Ace'
get_name[2] = 'Two'
get_name[3] = 'Three'
get_name[4] = 'Four'
get_name[5] = 'Five'
get_name[6] = 'Six'
get_name[7] = 'Seven'
get_name[8] = 'Eight'
get_name[9] = 'Nine'
get_name[10] = 'Ten'
get_name[11] = 'Jack'
get_name[12] = 'Queen'
get_name[13] = 'King'

get_suit = {}
get_suit['c'] = "Clubs"
get_suit['d'] = "Diamonds"
get_suit['h'] = "Hearts"
get_suit['s'] = "Spades"

get_rank = {}
get_rank['Clubs'] = 4
get_rank['Diamonds'] = 3
get_rank['Hearts'] = 2
get_rank['Spades'] = 1


@functools.total_ordering
class PlayingCard:
    '''
    This class  describes  the rank and suit of the playing card. The rank is a number in the range 1-13 (indicating
    the ranks Ace through King, and suit is a single character "d" "c", "h", or "s" indicating the suit (diamonds,
    clubs, hearts, or spades).
    '''

    def __init__(self, rank, suit):
        self.rank = rank
        self.suit = suit

    def getRank(self):
        '''
        This class returns the rank of the card as a number.
        '''
        return self.rank

    def getSuit(self):
        '''
        This class returns the suit of the card as a word.
        '''
        return get_suit[self.suit]

    def bjValue(self):
        '''
        This class returns the Blackjack value of a card. Ace has a blackjack value of 1, face cards all have blackjack
        value 10. The rest of the cards have blackjack values that are the same as their rank. The returned value from
        this method will always be a number.
        '''
        if self.rank < 10:
            return self.rank
        else:
            return 10

    def __str__(self):
        '''
        This class returns a string containing the full name of the card.
        '''
        return '{} of {}'.format(get_name[self.getRank()], self.getSuit())

    def __eq__(self, other):
        '''
        This class returns True if an existing playing card has the same rank and the same suit as the object "other"
        that is sent in as parameter.
        '''
        if self.getSuit() == other.getSuit() and self.getRank() == other.getRank():
            return True
        else:
            return False

    def __lt__(self, other):
        '''
        This class returns True if an existing object is less than the object "other" that is sent in as parameter,
        returns False otherwise.
        '''
        if get_rank[self.getSuit()] < get_rank[other.getSuit()]:
            return True
        elif get_rank[self.getSuit()] > get_rank[other.getSuit()]:
            return False
        else:
            if self.getRank() < other.getRank():
                return True
            else:
                return False


# Below is the test program that creates and sorts five cards.

c1 = PlayingCard(5, "c")  # constructs the Card object
c2 = PlayingCard(13, "h")  # constructs the Card object
c3 = PlayingCard(13, "c")  # constructs the Card object
c4 = PlayingCard(10, "s")  # constructs the Card object
c5 = PlayingCard(7, "d")  # constructs the Card object

lst = [c1, c2, c3, c4, c5]
sorted_lst = sorted(lst)
for card in sorted_lst:
    print(card)

print(c2 == c3)
print(c1 < c3)

# This is the actual output generated by the program above.
"""
Ten of Spades
King of Hearts
Seven of Diamonds
Five of Clubs
King of Clubs
False
True

Process finished with exit code 0
"""
