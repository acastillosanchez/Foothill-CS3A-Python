"""
03/29/2020

This is an object oriented program, with instance variables, and class variables. The class has five methods. The program
has a defined class where one object of the class represents one playing card. The program executes code and test a reusable
class. This program calculates a comment for the PlayingCard class and for every method in the class. All 5 required
methods are inside the PlayingCard class. This test program thoroughly tests all methods inside PlayingCard class.
This program demonstrates additional practice with a dictionary. The class PlayingCard has a comment that states what
one object of class PlayingCard represents. Every method in class PlayingCard has a comment that tells what the method
does or returns. The dictionary translates from rank numbers and suit letters to words should be a class variable.
"""

# My Program

get_name = {}
get_name[1] = 'Ace'
get_name[2] = 'Two'
get_name[3] = 'Three'
get_name[4] = 'Four'
get_name[5] = 'Five'
get_name[6] = 'Six'
get_name[7] = 'Seven'
get_name[8] = 'Eight'
get_name[9] = 'Nine'
get_name[10] = 'Ten'
get_name[11] = 'Jack'
get_name[12] = 'Queen'
get_name[13] = 'King'

get_suit = {}
get_suit['c'] = "Clubs"
get_suit['d'] = "Diamonds"
get_suit['h'] = "Hearts"
get_suit['s'] = "Spades"

class PlayingCard:
    '''
    This class  describes  the rank and suit of the playing card. The rank is a number in the range 1-13 (indicating
    the ranks Ace through King, and suit is a single character "d" "c", "h", or "s" indicating the suit (diamonds,
    clubs, hearts, or spades).
    '''
    def __init__(self, rank, suit):
        self.rank = rank
        self.suit = suit

    def getRank(self):
        '''
        This class returns the rank of the card as a number.
        '''
        return self.rank

    def getSuit(self):
        '''
        This class returns the suit of the card as a word.
        '''
        return get_suit[self.suit]

    def bjValue(self):
        '''
        This class returns the Blackjack value of a card. Ace has a blackjack value of 1, face cards all have blackjack
        value 10. The rest of the cards have blackjack values that are the same as their rank. The returned value from
        this method will always be a number.
        '''
        if self.rank < 10:
            return self.rank
        else:
            return 10

    def __str__(self):
        '''
        This class returns a string containing the full name of the card.
        '''
        return '{} of {}'.format(get_name[self.getRank()],self.getSuit())

# Below is the test program that verifies all of the above methods.

c1 = PlayingCard(5, "c")  # constructs the Card object
print(c1)  # verifies that the Card object got constructed
print(c1.getRank())  # outputs 5
print(c1.getSuit())  # outputs "Clubs"
print(c1.bjValue())  # outputs 5

c2 = PlayingCard(13, "h")  # constructs the Card object
print(c2)  # verifies that the Card object got constructed
print(c2.getRank())  # outputs 13
print(c2.getSuit())  # outputs "Hearts"
print(c2.bjValue())  # outputs 10

# This is the actual output generated by the program above.

"""
Five of Clubs
5
Clubs
5
King of Hearts
13
Hearts
10

Process finished with exit code 0
"""

